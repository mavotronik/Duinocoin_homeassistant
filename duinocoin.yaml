duinocoin: 
       ### Auto stake, show balance, verification status, number of warnings ### 
       
 ## in configuration.yaml ##
 python_script:
   requirements:
   - requests
 ## in configuration.yaml ##
 
#---- sensors ----#
#---- Need to install Python Scipts Pro component  ----#
#-- "Python Scipts Pro" is a custom component from AlexxIT (https://github.com/AlexxIT/PythonScriptsPro) --#

    sensor:
      - platform: python_script
        name: DUCO balance
        scan_interval: '00:10:00'  
        unit_of_measurement: DUCO
        icon: mdi:currency-btc
        source: |
          import requests
          response = requests.get('https://server.duinocoin.com/balances/<username>')
          response.raise_for_status()
          data = response.json()
          balance= str(round(data['result']['balance'], 2))
          self.state = balance
     
      - platform: python_script
        name: DUCO is verified
        scan_interval: '00:30:00'  
        source: |
         import requests
         response = requests.get('https://server.duinocoin.com/balances/<username>')
         response.raise_for_status()
         data = response.json()
         is_verified = str((data['result']['verified']))
         self.state = is_verified
     
      - platform: python_script
        name: DUCO warnings
        scan_interval: '00:15:05'  
        icon: mdi:weather-cloudy-alert
        source: |
         import requests
         response = requests.get('https://server.duinocoin.com/balances/<username>')
         response.raise_for_status()
         data = response.json()
         warnings = str((data['result']['warnings']))
         self.state = warnings

      - platform: python_script
        name: DUCO stake_date_timestamp
        scan_interval: '00:30:10'  
        icon: mdi:weather-cloudy-clock
        source: |
         import requests
         response = requests.get('https://server.duinocoin.com/balances/<username>')
         response.raise_for_status()
         data = response.json()
         stake_date_timestamp = str((data['result']['stake_date']))
         self.state = stake_date_timestamp  


    template:
#---- Secret data ----#    
      - sensor:
  
          - name: duco_user
            state: !secret duco_user  #your username in secrets.yaml
            
          - name: duco_password
            state: !secret duco_password  #your password in secrets.yaml
            
#---- End stake sensor ----#
      - binary_sensor:
          - name: duco_stake_end
            state: > 

                {% if utcnow () == as_datetime(states('sensor.duco_stake_date_timestamp'))%}
                on
                {%else %}
                off
                {%endif%}
                
#---- Automations ----#

    automation:
      - id: 'duco_stake_done'
        initial_state: true
        alias: 'duco_stake_done'
        trigger:
          - platform: state
            entity_id: binary_sensor.duco_stake_end
            to: 'on'
        condition: []
        action:
          - service: telegram_bot.send_message
            data:
              message: 'Staking is done! Next in 2 hours. Time: {{ states(''sensor.date_time'') }} '
        mode: single
  
      - id: 'duco_stake_start'
        initial_state: true
        alias: 'duco_stake_start'
        trigger:
          - platform: state
            entity_id: binary_sensor.duco_stake_end
            to: 'on'
        condition:
           - condition: state
             entity_id: sensor.duco_is_verified
             state: "yes"
        action:
          - delay: 02:00:00
          - service: telegram_bot.send_message
            data:
              message: 'Sending coins to stake... Balance DUCO: {{ states(''sensor.duco_balance'') }} '
          - delay: 00:00:02
          - service: python_script.exec
            data:
              file: python_scripts/duco_stake.py
              username: "{{ states('sensor.duco_user') }}"
              password: "{{ states('sensor.duco_password') }}"
              amount: "{{ states('sensor.duco_balance') | round(1) }}"
              cache: false
          - service: telegram_bot.send_message
            data:
              message: 'Staking started! Time: {{ states(''sensor.date_time'') }} '
            mode: single
           
